@using Microsoft.Extensions.Localization
@using System.Timers
@if (Visible)
{
    <div class="lb-toast-message" style="@(Message.Click != null || Message.CloseOnClick ? "cursor: pointer;" : ";") @Style">
        <div aria-live="polite" class="@GetMessageCssClasses()">
            <div class="lb-toast-item @(string.IsNullOrEmpty(GetDetail()) ? "lb-toast-titlebar-solo" : "")">
                <div @onclick="NotificationClicked">
                    <div class="lb-toast-titlebar">
                        <div class="lb-toast-title">
                            @((MarkupString)GetSummary())
                        </div>
                        <a @onclick:preventDefault="true" class="lb-toast-titlebar-close" @onclick=@Close role="button">
                            <CrossIcon />
                        </a>
                    </div>
                    @if (!string.IsNullOrEmpty(GetDetail()))
                    {
                        <p class="lb-toast-detail">@((MarkupString)GetDetail())</p>
                    }
                </div>
                <div style="clear: both;"></div>
            </div>
        </div>
    </div>
}
@code {
    string GetMessageCssClasses()
    {
        if (Message.Severity == ToastSeverity.Error)
        {
            return "lb-message-error";
        }
        else if (Message.Severity == ToastSeverity.Info)
        {
            return "lb-message-info";
        }
        else if (Message.Severity == ToastSeverity.Success)
        {
            return "lb-message-success";
        }
        else if (Message.Severity == ToastSeverity.Warning)
        {
            return "lb-message-warn";
        }

        return "";
    }

    [Inject] private ToastService Service { get; set; } = null!;

    public bool Visible { get; set; } = true;

    [Parameter] public LinkBlazor.ToastMessage Message { get; set; } = null!;
    [Parameter] public IStringLocalizer Localizer { get; set; } = null!;

    [Parameter]
    public string Style { get; set; }

    public void Close()
    {
        Service.Messages.Remove(Message);
        Message?.Close?.Invoke(Message);
    }

    protected string GetDetail()
    {
        if (Localizer != null && Message.Detail != null)
            Localizer[Message.Detail];
        else Message.Detail;
    }
    protected string GetSummary()
    {
        if (Localizer != null && Message.Summary != null)
            Localizer[Message.Summary];
        else Message.Summary;
    }

    protected override void OnInitialized()
    {
        System.Threading.Tasks.Task.Delay(Convert.ToInt32(Message.Duration ?? 3000)).ContinueWith(r => InvokeAsync(Close));
    }

    private void NotificationClicked()
    {
        if (Message.CloseOnClick)
            Close();

        Message?.Click?.Invoke(Message);
    }
}