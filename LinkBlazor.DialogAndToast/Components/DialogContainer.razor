@using Microsoft.JSInterop

@using System.Reflection;
@inject IJSRuntime JSRuntime
@implements IDisposable
<div id="@(ID +"-wrapper")" class="@WrapperCssClass" style="z-index:@Dialog.ZIndex">
    <div id="@ID" @ref="dialog" class="@($"{CssClass}")" role="dialog" style=@($"z-index:{Dialog.ZIndex};{Style}")>
        @if (Dialog.Options.ShowTitle)
        {
            <div id="@(ID +"-header")" class="lb-dialog-titlebar">
                @if (!string.IsNullOrEmpty(Dialog.Options.Title))
                {
                    <div class="lb-dialog-title" style="display: inline" id="rz-dialog-0-label">
                        @((MarkupString)Dialog.Options.Title)
                    </div>
                }
                @if (Dialog.Options.ShowClose)
                {
                    <a @onclick:preventDefault="true" class="lb-dialog-titlebar-close" @onclick=@Close role="button" tabindex=@Dialog.Options.CloseTabIndex>
                        <CrossIcon />
                    </a>
                }
            </div>

        }
        <div class="lb-dialog-content">
            @ChildContent
        </div>
    </div>

    @if (ShowMask)
    {
        @if (Dialog.Options.CloseDialogOnOverlayClick)
        {
            <div style="cursor:pointer;" @onclick="@Close" class="lb-dialog-mask"></div>
        }
        else
        {
            <div class="lb-dialog-mask" style="pointer-events: none;"></div>
        }
    }

</div>

@code {
    ElementReference dialog;

    bool shouldRender = true;
    protected override bool ShouldRender()
    {
        return shouldRender;
    }

    [Parameter]
    public Dialog Dialog { get; set; } = default!;
    [Parameter]
    public bool ShowMask { get; set; } = false;

    public string ID => Dialog.Id;

    RenderFragment ChildContent => new RenderFragment(builder =>
        {
            builder.OpenComponent(0, Dialog.Type);

            if (Dialog.Parameters != null)
            {
                foreach (var parameter in Dialog.Parameters)
                {
                    builder.AddAttribute(1, parameter.Key, parameter.Value);
                }
            }

            builder.AddComponentReferenceCapture(2, component => reference = component);

            builder.CloseComponent();
        });

    object reference = default!;

    void Close()
    {
        Service.Close(null, Dialog.Options);
    }

    string CssClass
    {
        get
        {
            var baseCss = "lb-dialog";
            return string.IsNullOrEmpty(Dialog.Options.CssClass) ? baseCss : $"{baseCss} {Dialog.Options.CssClass}";
        }
    }

    string WrapperCssClass
    {
        get
        {
            var baseCss = "lb-dialog-wrapper";
            return string.IsNullOrWhiteSpace(Dialog.Options.WrapperCssClass) ? baseCss : Dialog.Options.WrapperCssClass;
        }
    }

    string Style
    {
        get
        {
            var baseStyle = "";
            var widthStyle = string.IsNullOrEmpty(Dialog.Options.Width) ? "" : $"width: {Dialog.Options.Width};";
            var heightStyle = string.IsNullOrEmpty(Dialog.Options.Height) ? "" : $"height: {Dialog.Options.Height};";
            var topStyle = string.IsNullOrEmpty(Dialog.Options.Top) ? "" : $"top: {Dialog.Options.Top};";
            var leftStyle = string.IsNullOrEmpty(Dialog.Options.Left) ? "" : $"left: {Dialog.Options.Left};";
            var bottomStyle = string.IsNullOrEmpty(Dialog.Options.Bottom) ? "" : $"bottom: {Dialog.Options.Bottom};";
            var resizeStyle = Dialog.Options.Resizable ? "resize:both;" : "";
            return $"{baseStyle}{widthStyle}{heightStyle}{topStyle}{leftStyle}{bottomStyle}{resizeStyle}{Dialog.Options.Style}";
        }
    }
    /// <summary>
    /// Called when resized.
    /// </summary>
    /// <param name="w">The width.</param>
    /// <param name="h">The height.</param>
    [JSInvokable("RadzenDialog.OnResize")]
    public void OnResize(double w, double h) {
        shouldRender = false;

        // if (Dialog.Options.Resize != null && w != 0 && h != 0) {
        //     Dialog.Options.Resize(new System.Drawing.Size(Convert.ToInt32(w), Convert.ToInt32(h)));
        // }

        // width = $"width: {w}px;";
        // height = $"height: {h}px;";

        shouldRender = true;
    }
    [Inject]
    DialogService Service { get; set; } = default!;
    protected override void OnInitialized()
    {
        Service.OnRefresh += OnRefresh;
    }

    void OnRefresh()
    {
        var stateHasChanged = reference?.GetType().GetMethod("StateHasChanged", BindingFlags.NonPublic | BindingFlags.Instance);

        InvokeAsync(() =>
        {
            StateHasChanged();
            stateHasChanged?.Invoke(reference, null);
        })
        .ConfigureAwait(false);
    }

    public void Dispose()
    {
        Service.OnRefresh -= OnRefresh;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var options = Dialog.Options;

            var dialogOptions = new DialogOptions()
                {
                    Width = options != null ? !string.IsNullOrEmpty(options.Width) ? options.Width : "" : "",
                    Height = options != null ? options.Height : null,
                    Left = options != null ? options.Left : null,
                    Top = options != null ? options.Top : null,
                    Bottom = options != null ? options.Bottom : null,
                    ShowTitle = options != null ? options.ShowTitle : true,
                    Title = options != null ? options.Title : string.Empty,
                    CanDrag = options != null ? options.CanDrag : true,
                    MultiDialog = options != null ? options.MultiDialog : true,
                    ShowClose = options != null ? options.ShowClose : true,
                    Style = options != null ? options.Style : "",
                    CloseDialogOnOverlayClick = options != null ? options.CloseDialogOnOverlayClick : false,
                    CloseDialogOnEsc = options != null ? options.CloseDialogOnEsc : true,
                    CssClass = options != null ? options.CssClass : "",
                    CloseTabIndex = options != null ? options.CloseTabIndex : 0,
                    Resizable = options != null ? options.Resizable : false,
                };

            await JSRuntime.InvokeAsync<string>("LinkBlazor.OpenDialog", dialogOptions, Service.Reference, DotNetReference, ID);
        }
    }

    private DotNetObjectReference<DialogContainer>? _DotNetReference;
    protected DotNetObjectReference<DialogContainer> DotNetReference
    {
        get
        {
            if (_DotNetReference == null)
            {
                _DotNetReference = DotNetObjectReference.Create(this);
            }

            return _DotNetReference;
        }
    }
}