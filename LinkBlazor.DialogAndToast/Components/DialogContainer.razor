@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@using System.Reflection;
@inject IJSRuntime JSRuntime
@implements IDisposable
<div class="@WrapperCssClass">
    <div @ref="dialog" class="@CssClass" role="dialog" style=@Style>
        @if (Dialog.Options.ShowTitle)
        {
            <div class="lb-dialog-titlebar" style="position:relative">
                @if (!string.IsNullOrEmpty(Dialog.Options.Title))
                {
                    <div class="lb-dialog-title" style="display: inline" id="rz-dialog-0-label">
                        @((MarkupString)Dialog.Options.Title)
                    </div>
                }
                @if (Dialog.Options.ShowClose)
                {
                    <a @onclick:preventDefault="true" style="position:absolute; right:2px; top:2px; cursor:pointer;" @onclick=@Close role="button" tabindex=@Dialog.Options.CloseTabIndex>
                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="16px" height="16px"
                             viewBox="0 0 121.31 122.876" enable-background="new 0 0 121.31 122.876" xml:space="preserve">
                             <g>
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M90.914,5.296c6.927-7.034,18.188-7.065,25.154-0.068 c6.961,6.995,6.991,18.369,
                                0.068,25.397L85.743,61.452l30.425,30.855c6.866,6.978,6.773,18.28-0.208,25.247 c-6.983,6.964-18.21,
                                6.946-25.074-0.031L60.669,86.881L30.395,117.58c-6.927,7.034-18.188,7.065-25.154,
                                0.068 c-6.961-6.995-6.992-18.369-0.068-25.397l30.393-30.827L5.142,30.568c-6.867-6.978-6.773-18.28,
                                0.208-25.247 c6.983-6.963,18.21-6.946,25.074,0.031l30.217,30.643L90.914,5.296L90.914,5.296z" />
                            </g>
                         </svg>
                    </a>
                }
            </div>

        }
        <div class="lb-dialog-content">
            @ChildContent
        </div>
    </div>

    @if (ShowMask)
    {
        @if (Dialog.Options.CloseDialogOnOverlayClick)
        {
            <div style="cursor:pointer;" @onclick="@Close" class="lb-dialog-mask"></div>
        }
        else
        {
            <div class="lb-dialog-mask" style="pointer-events: none;"></div>
        }
    }

</div>

@code {
    ElementReference dialog;

    bool shouldRender = true;
    protected override bool ShouldRender()
    {
        return shouldRender;
    }

    [Parameter]
    public Dialog Dialog { get; set; }

    [Parameter]
    public bool ShowMask { get; set; } = true;

    RenderFragment ChildContent => new RenderFragment(builder =>
        {
            builder.OpenComponent(0, Dialog.Type);

            if (Dialog.Parameters != null)
            {
                foreach (var parameter in Dialog.Parameters)
                {
                    builder.AddAttribute(1, parameter.Key, parameter.Value);
                }
            }

            builder.AddComponentReferenceCapture(2, component => reference = component);

            builder.CloseComponent();
        });

    object reference;

    void Close()
    {
        Service.Close();
    }

    string CssClass
    {
        get
        {
            var baseCss = "lb-dialog";
            return string.IsNullOrEmpty(Dialog.Options.CssClass) ? baseCss : $"{baseCss} {Dialog.Options.CssClass}";
        }
    }

    string WrapperCssClass
    {
        get
        {
            var baseCss = "lb-dialog-wrapper";
            return string.IsNullOrWhiteSpace(Dialog.Options.WrapperCssClass) ? baseCss : $"{baseCss} {Dialog.Options.WrapperCssClass}";
        }
    }

    string Style
    {
        get
        {
            var baseStyle = "";
            var widthStyle = string.IsNullOrEmpty(Dialog.Options.Width) ? "" : $"width: {Dialog.Options.Width};";
            var heightStyle = string.IsNullOrEmpty(Dialog.Options.Height) ? "" : $"height: {Dialog.Options.Height};";
            var topStyle = string.IsNullOrEmpty(Dialog.Options.Top) ? "" : $"top: {Dialog.Options.Top};";
            var leftStyle = string.IsNullOrEmpty(Dialog.Options.Left) ? "" : $"left: {Dialog.Options.Left};";
            var bottomStyle = string.IsNullOrEmpty(Dialog.Options.Bottom) ? "" : $"bottom: {Dialog.Options.Bottom};";
            return $"{baseStyle}{widthStyle}{heightStyle}{topStyle}{leftStyle}{bottomStyle}{Dialog.Options.Style}";
        }
    }

    [Inject]
    DialogService Service { get; set; }
    protected override void OnInitialized()
    {
        Service.OnRefresh += OnRefresh;
    }

    void OnRefresh()
    {
        var stateHasChanged = reference?.GetType().GetMethod("StateHasChanged", BindingFlags.NonPublic | BindingFlags.Instance);

        InvokeAsync(() =>
        {
            StateHasChanged();
            stateHasChanged?.Invoke(reference, null);
        })
        .ConfigureAwait(false);
    }

    public void Dispose()
    {
        Service.OnRefresh -= OnRefresh;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var options = Dialog.Options;

            var dialogOptions = new DialogOptions()
                {
                    Width = options != null ? !string.IsNullOrEmpty(options.Width) ? options.Width : "" : "",
                    Height = options != null ? options.Height : null,
                    Left = options != null ? options.Left : null,
                    Top = options != null ? options.Top : null,
                    Bottom = options != null ? options.Bottom : null,
                    ShowTitle = options != null ? options.ShowTitle : true,
                    ShowClose = options != null ? options.ShowClose : true,
                    Style = options != null ? options.Style : "",
                    CloseDialogOnOverlayClick = options != null ? options.CloseDialogOnOverlayClick : false,
                    CloseDialogOnEsc = options != null ? options.CloseDialogOnEsc : true,
                    CssClass = options != null ? options.CssClass : "",
                    CloseTabIndex = options != null ? options.CloseTabIndex : 0,
                };

            await JSRuntime.InvokeAsync<string>("LinkBlazor.OpenDialog", dialogOptions, Service.Reference, DotNetReference);
        }
    }

    private DotNetObjectReference<DialogContainer>? _DotNetReference;
    protected DotNetObjectReference<DialogContainer> DotNetReference
    {
        get
        {
            if (_DotNetReference == null)
            {
                _DotNetReference = DotNetObjectReference.Create(this);
            }

            return _DotNetReference;
        }
    }
}