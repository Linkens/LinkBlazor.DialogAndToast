@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Web
@using LinkBlazor
@using System.ComponentModel.DataAnnotations

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<button @onclick="()=>Show()">Test Dialog</button>
<button @onclick="ShowDraggable">Draggable</button>
<button @onclick="ShowResizable">Sizable</button>
<button @onclick="@(()=>Show("With Title"))">Test Title</button>
<button @onclick="@(() => Dialog.Confirm("Coucou"))">Confirm</button>
<button @onclick="()=>ShowToast(ToastSeverity.Info)">Test Info</button>
<button @onclick="()=>ShowToast(ToastSeverity.Warning)">Test Warning</button>
<button @onclick="()=>ShowToast(ToastSeverity.Error)">Test Error</button>
<button @onclick="()=>ShowToast(ToastSeverity.Success)">Test Success</button>
<button @onclick="()=>ShowToastNo(ToastSeverity.Success)"> No Detail</button>
<button @onclick="@(()=>ShowToastNo(ToastSeverity.Success," Lorem Ipsum is simply dummy text of the printing and typesetting industry."))"> No Detail Long</button>

<label>Model Name</label>
<input @bind-value=Model.Name />
<button @onclick=Validate>Validate Model</button>
@code {
    [Inject] public DialogService Dialog { get; set; }
    [Inject] public ToastService Toast { get; set; }
    [Inject] public ValidatorService Validator { get; set; }
    protected TestModel Model = new();
    protected async Task Show(string Title = null) {
        var Return = await Dialog.OpenAsync<TestWindow>(options: new DialogOptions { Title = Title, CloseDialogOnOverlayClick = true, CloseDialogOnEsc = true });
    }
    protected int Index = 0;
    protected async Task ShowToast(ToastSeverity Severity) {
        Toast.Toast(Severity, $"{Severity.ToString()} Lorem Ipsum is", $"Detail {Index++} Lorem Ipsum is simply dummy text of the printing and typesetting industry. ", duration: 15000);
    }
    protected async Task ShowToastNo(ToastSeverity Severity, string Title = "Bravo", string Detail = "") {
        Toast.Toast(Severity, Title, duration: 15000);
    }
    protected async Task ShowDraggable() {
        await Dialog.OpenAsync<TestWindow>(options: new DialogOptions { CanDrag = true, MultiDialog = true, Title = "Test", WrapperCssClass = "lb-empty" });
    } 
    protected async Task ShowResizable() {
        await Dialog.OpenAsync<TestWindow>(options: new DialogOptions { Resizable = true, CanDrag =true, MultiDialog = true, Title = "Test", WrapperCssClass = "lb-empty" });
    }
    protected void Validate() {
        if (!Validator.IsModelValid(Model)) return;
        Toast.Toast(ToastSeverity.Success, "Bravo", "Model is valid", duration: 15000);
    }

    public class TestModel {
        [Required, MinLength(5)] public string Name { get; set; } = default!;
    }

}